注意事项	isaaclab是通过isaac sim simulator 来运行的。launch omniverse app必须先运行 	所有在isaaclab上的代码前面必须是以下的格式		from __future__ import annotations		from omni.isaac.lab.app import AppLauncher		import argparse		parser = argparse.ArgumentParser(description="tutorial")		AppLauncher.add_app_launcher_args(parser)		args_cli = parser.parse_args()		app_launcher = AppLauncher(args_cli)		simulation_app = app_launcher.app机器人建模	在isaac sim上面的建模方式有		-直接从isaac assert beta（位置在左下方）里面的库下载usd文件，双击打开进行修改 （除非不进行修改否则不推荐）			-这种方法的usd自带reference无法使用robot assembler来添加机械臂			-文档过于久远，暂未发现如何正确的添加机械比					-使用coordinate将机械手臂移动到指定的位置比如在UR5E的末端有一个tool0，给予一个fix joint来固定gripper 与 UR5E			-这个办法能够利用isaac sim里面的 “parellel gripper” 这个功能来分别操作机器人以及机器手臂				缺点：在isaaclab里面并未发现有parellel gripper这个function，后续的demo都是用一个整体的机器人				注意的点：不要直接将机械手臂拖到任何的xform里面，这样会造成nested articulation。									-在urdf里面通过xacro来拼接机械臂与gripper			-只有urdf 导入的文件能保存joint的配置 （以下例子/home/simtech/Downloads/ur5e_2f85/robots/urdf/ur5e_with_gripper.urdf进行操作）				-urdf导入步骤					-修改 urdf 						under <mesh filename 确保path指向你的stl跟dae的目录文件					-导入urdf						isaac sim> workflows> urdf impoter > input file > import					-修改内置的参数						-移除全部joint 的mimic joint						-在finger link 与 finger tip之间添加一个revolute joint						-inner_knuckle 勾选 exclude from articulation						-robot上的joint根据gripper的大小重量调节 stiffness 和 damping 									（这里可以通过代码的config来调）									（参考source/extensions/omni.isaac.lab_assets/omni/isaac/lab_assets/UR5E_gripper.py）									（参数错误会导致精准度或者根本无法正确移动）						-由于我们只控制其中的一边，为确保同步另一边所有的revolute joint全部添加 mimic 							设置gearing为-1							offset 为0							reference joint为对立的joint							reference joint axis 为rotZ						-参考视频 >/home/simtech/Documents/kq_note/inport_and_config_urdf.webm																										运行代码	conda deactivate	conda activate isaaclab	./isaaclab.sh -p +路径		解释：isaaclab是创建的conda虚拟环境，为了安装包版本不与其他的代码有冲突。请确保当前的路径是/home/simtech/IsaacLab 以及文件里面有isaaclab.sh		-添加物品/机器人		参考source/standalone/tutorials/06_own_testing/01import_usd_v1.py  			这里我们可以选择通过官方提供的库直接导入模型的usd或者将usd下载下来进行本地导入				-配置机器人关节，复制场景，机器人随机的运动		 参考source/standalone/tutorials/06_own_testing/02ur5e_random_move.py		 	-因为后续需要频繁的导入机器人，我们将机器人的配置统一放在source/extensions/omni.isaac.lab_assets/omni/isaac/lab_assets目录里面		-配置细节参考source/extensions/omni.isaac.lab_assets/omni/isaac/lab_assets/UR5E_gripper.py		-注意需要在__init__.py导出你所添加的python文件		-调用机器人参考source/standalone/tutorials/06_own_testing/03ur5e_scene.py			-下载物品，转化大小，转成usd格式		-下载物品			待定 暂未找到库		-转换大小 运行			注意， issac sim 里面不接受任何以数字开头的文件、			input folder /home/simtech/Downloads/Collected_ur5e/objects			output folder /home/simtech/Downloads/Collected_ur5e/objects/resize_obj			./isaaclab.sh -p /home/simtech/Downloads/Collected_ur5e/stl_resize.py		-转换成为usd 运行			./isaaclab.sh -p source/standalone/tools/convert_mesh.py 1 400  /home/simtech/Downloads/Collected_ur5e/objects/resize_obj  /home/simtech/Downloads/Collected_ur5e/objects/usd   --collision-approximation convexDecomposition   --mass 1.0  --headless					测试模型	运行	./isaaclab.sh -p source/standalone/sky/import_and_do_random_move.py代码解释	robot cofig			在/home/simtech/IsaacLab/source/extensions/omni.isaac.lab_assets/omni/isaac目录下创建一个定义机器手臂的文件		在这里能定义机器手臂的初始位置，初始状态，damping，stiffness等等		（参考目录下UR5E_gripper）		在__init__.py 添加你的py 			主代码			add ground 			# Ground-plane		    	cfg_ground = sim_utils.GroundPlaneCfg()		    	cfg_ground.func("/World/defaultGroundPlane", cfg_ground)		add light			# spawn distant light		    	cfg_light_distant = sim_utils.DistantLightCfg(					intensity=3000.0,					color=(0.75, 0.75, 0.75),					    )		    	cfg_light_distant.func("/World/lightDistant", cfg_light_distant, translation=(1, 0, 10))		add robot			####导入robot config			from omni.isaac.lab_assets import UR5E_CFG			###set up robot configuration		    	robotic_cfg=UR5E_CFG.copy()		    	robotic_cfg.prim_path="/World/Origin.*/Robot"		    	print(robotic_cfg.prim_path)		    	robot=Articulation(cfg=robotic_cfg)		add object			###导入object config			from omni.isaac.lab.assets import RigidObject, RigidObjectCfg			# Rigid Object		    	z=(0.1,0.1,0.1)		    	cone_cfg = RigidObjectCfg(					prim_path="/World/Origin.*/Cone",					spawn=sim_utils.ConeCfg(					    radius=0.1,					    height=0.2,					    rigid_props=sim_utils.RigidBodyPropertiesCfg(),					    mass_props=sim_utils.MassPropertiesCfg(mass=1.0),					    collision_props=sim_utils.CollisionPropertiesCfg(),					    visual_material=sim_utils.PreviewSurfaceCfg(diffuse_color=(0.0, 1.0, 0.0), metallic=0.2),						),			init_state=RigidObjectCfg.InitialStateCfg( pos=(0.2, 0.2, 0.2)),		    	)		    	cone_object = RigidObject(cfg=cone_cfg)		    					add to scene			scene_entities ={"ur5e": robot,"cone":cone_object}    			return scene_entities, origins				    		get joint pos	  			robot = entities["ur5e"]					joint_pos= robot.data.default_joint_pos.clone()		get joint vel			joint_vel=robot.data.default_joint_vel.clone()adjust camera setting 	source/extensions/omni.isaac.lab_tasks/omni/isaac/lab_tasks/manager_based/manipulation/lift/config/ur5e/joint_pos_env_cfg.pyto disable or enable visualization debug of the body 	source/extensions/omni.isaac.lab/omni/isaac/lab/envs/mdp/commands/pose_command.pyRSL-RL特别适用于机器人控制和高效并行训练，能够处理大规模仿真和训练任务Stable-Baselines3 提供了一套易于使用且广泛应用的强化学习算法实现。包括PPO（Proximal Policy Optimization）、A2C（Advantage Actor-Critic）、DQN（Deep Q-Network）skrl 是一个用于深度强化学习的库，专注于灵活性和可扩展性。它支持多个深度学习框架，包括 PyTorch 和 TensorFlow，并且能够与许多仿真环境集成特性		RSL-RL				Stable-Baselines3 (SB3)				skrl高效并行化	是				否						是易用性		较高，但需要理解并行概念		高						较高多种算法支持	主要关注机器人控制和复杂任务	提供多种经典算法				支持多种算法，可自定义社区支持	较小，但专业性强		活跃社区，广泛应用				社区支持增长中框架支持	主要基于PyTorch和Isaac		主要基于PyTorch					支持PyTorch和TensorFlow适用场景	高效并行训练复杂机器人控制任务	各种RL任务，特别适合原型开发和研究		需要高度灵活性和自定义的任务rl./isaaclab.sh -p source/standalone/workflows/rl_games/train.py --task Isaac-Lift-Cube-ur5e-v2-v0 --headlessrl run./isaaclab.sh -p source/standalone/workflows/rl_games/play.py --task Isaac-Lift-Cube-ur5e-v2-v0 --num_envs 32 --checkpoint /home/simtech/IsaacLab/logs/rl_games/ur5e_lift/2024-07-18_19-15-39/nn/last_ur5e_lift_ep_50_rew_1.7770394.pth		rsl./isaaclab.sh -p source/standalone/workflows/rsl_rl/train.py --task Isaac-Lift-Cube-ur5e-v2-v0 --headlessrsl play					./isaaclab.sh -p source/standalone/workflows/rsl_rl/play.py --task Isaac-Lift-Cube-ur5e-v2-v0 --num_envs 32 --load_run 2024-07-18_17-57-14 --checkpoint model_0.pt